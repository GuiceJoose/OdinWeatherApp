/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("const userInput = document.querySelector(\"input\");\nconst form = document.querySelector(\"form\");\n\nform.addEventListener(\"submit\", handleSubmit);\ninitializePage();\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n  showLocation();\n  showWeatherData();\n  userInput.value = \"\";\n}\n\nasync function getCoords(location) {\n  try {\n    let locationName = location.replaceAll(\" \", \"%20\");\n    let coordsUrl =\n      \"http://api.openweathermap.org/geo/1.0/direct?q=\" +\n      locationName +\n      \"&limit=1&appid=151004f44b0dc03bef1221eb4dff0ac0\";\n\n    const response = await fetch(coordsUrl, { mode: \"cors\" });\n    const coordsData = await response.json();\n\n    const lat = coordsData[0].lat;\n    const lon = coordsData[0].lon;\n    const country = coordsData[0].country;\n    const state = coordsData[0].state;\n    const name = coordsData[0].name;\n\n    console.log(coordsData);\n\n    return { lat, lon, country, state, name };\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nasync function getWeather() {\n  try {\n    const coords = await getCoords(userInput.value);\n    const lat = coords.lat;\n    const lon = coords.lon;\n\n    let weatherUrl =\n      \"https://api.openweathermap.org/data/2.5/onecall?lat=\" +\n      lat +\n      \"&lon=\" +\n      lon +\n      \"&appid=151004f44b0dc03bef1221eb4dff0ac0\";\n\n    const response = await fetch(weatherUrl, { mode: \"cors\" });\n    const weatherData = await response.json();\n    console.log(weatherData);\n    return weatherData;\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nasync function processWeatherData() {\n  try {\n    let newData = await getWeather();\n    let currentTemp = Math.round(convertKtoF(newData.current.temp));\n    let highTemp = Math.round(convertKtoF(newData.daily[0].temp.max));\n    let lowTemp = Math.round(convertKtoF(newData.daily[0].temp.min));\n    let feelsLikeTemp = Math.round(convertKtoF(newData.current.feels_like));\n    let humidity = Math.round(newData.current.humidity);\n    let currentConditions = newData.current.weather[0].description;\n    let windSpeed = Math.round(newData.current.wind_speed);\n    let windDirection = newData.current.wind_deg;\n\n    let weeklyForcast = getWeeklyForcast(newData.daily);\n    let processedWeeklyForecast = weeklyForcast.map((x) => {\n      let high = Math.round(convertKtoF(x.high));\n      let low = Math.round(convertKtoF(x.low));\n      let conditions = x.conditions;\n      return { high, low, conditions };\n    });\n\n    return {\n      currentTemp,\n      highTemp,\n      lowTemp,\n      feelsLikeTemp,\n      humidity,\n      currentConditions,\n      windSpeed,\n      windDirection,\n      processedWeeklyForecast,\n    };\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nasync function showWeatherData() {\n  try {\n    let dataToShow = await processWeatherData();\n\n    const currentTempDisplay = document.getElementById(\"current-temp\");\n    currentTempDisplay.textContent = ` Current Temperature: ${dataToShow.currentTemp}째F`;\n\n    const highTempDisplay = document.getElementById(\"high-temp\");\n    highTempDisplay.textContent = `High: ${dataToShow.highTemp}째F`;\n\n    const lowTempDisplay = document.getElementById(\"low-temp\");\n    lowTempDisplay.textContent = `Low: ${dataToShow.lowTemp}째F`;\n\n    const feelsLikeTempDisplay = document.getElementById(\"feels-like\");\n    feelsLikeTempDisplay.textContent = `Feels Like: ${dataToShow.feelsLikeTemp}째F`;\n\n    const humidityDisplay = document.getElementById(\"humidity\");\n    humidityDisplay.textContent = `Humidity: ${dataToShow.humidity}%`;\n\n    const currentConditionsDisplay =\n      document.getElementById(\"current-conditions\");\n    currentConditionsDisplay.textContent = `Current Conditions ${dataToShow.currentConditions}`;\n\n    const windSpeedDisplay = document.getElementById(\"wind-speed\");\n    windSpeedDisplay.textContent = `Wind Speed: ${dataToShow.windSpeed}`;\n\n    const windDirectionDisplay = document.getElementById(\"wind-direction\");\n    windDirectionDisplay.style.transform =\n      \"rotate(\" + (180 + dataToShow.windDirection - 90) + \"deg)\";\n\n    showWeeklyForecast(dataToShow.processedWeeklyForecast);\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nasync function showLocation() {\n  try {\n    const locationData = await getCoords(userInput.value);\n    const country = locationData.country;\n    const state = locationData.state;\n    const name = locationData.name;\n\n    const countryDisplay = document.getElementById(\"location-country\");\n    countryDisplay.textContent = country;\n\n    const stateDisplay = document.getElementById(\"location-state\");\n    stateDisplay.textContent = state;\n\n    const nameDisplay = document.getElementById(\"location-name\");\n    nameDisplay.textContent = name;\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction initializePage() {\n  userInput.value = \"Chicago\";\n  showWeatherData();\n  showLocation();\n  userInput.value = \"\";\n}\n\nfunction getWeeklyForcast(weeksWeather) {\n  let weeklyForcast = weeksWeather.map((day) => {\n    let high = day.temp.max;\n    let low = day.temp.min;\n    let conditions = day.weather[0].description;\n    return { high, low, conditions };\n  });\n  return weeklyForcast;\n}\n\nfunction showWeeklyForecast(weeksForecast) {\n  let weeklyForecastDisplay = document.getElementById(\"weekly-forecast\");\n  weeksForecast.forEach((day) => {\n    let dayCard = makeWeekForcastCard(day);\n    weeklyForecastDisplay.appendChild(dayCard);\n  });\n}\n\nfunction makeWeekForcastCard(daysForecast) {\n  const dayForecastDisplay = document.createElement(\"div\");\n  dayForecastDisplay.classList.add(\"day-card\");\n  const forecastedHighTempDisplay = document.createElement(\"div\");\n  const forecastedLowTempDisplay = document.createElement(\"div\");\n  const forecastedConditionsDisplay = document.createElement(\"div\");\n\n  forecastedHighTempDisplay.textContent = daysForecast.high;\n  forecastedLowTempDisplay.textContent = daysForecast.low;\n  forecastedConditionsDisplay.textContent = daysForecast.conditions;\n\n  dayForecastDisplay.append(\n    forecastedHighTempDisplay,\n    forecastedLowTempDisplay,\n    forecastedConditionsDisplay\n  );\n  return dayForecastDisplay;\n}\n\nfunction convertKtoC(tempInK) {\n  const tempInC = parseInt(tempInK) - 273.15;\n  return tempInC;\n}\n\nfunction convertKtoF(tempInK) {\n  const tempInC = convertKtoC(tempInK);\n  const tempInF = convertCtoF(tempInC);\n  return tempInF;\n}\n\nfunction convertCtoF(tempInC) {\n  const tempInF = tempInC * (9 / 5) + 32;\n  return tempInF;\n}\n\nfunction convertFtoC(tempInF) {\n  const tempInC = (tempInF - 32) * (5 / 9);\n  return tempInC;\n}\n\n\n//# sourceURL=webpack://webpack-demo/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;